# vim: fdm=marker foldenable sw=4 ts=4 sts=4

# {{{ General Settings

# setw - set window option
set -g mouse on              # Enable scroll

set -g history-limit 50000   # Increase scrollback buffer size

set -sg escape-time 0        # Send escape key to vim immediately
set -sg repeat-time 600      # increase repeat timeout
set -g focus-events on       # allow passing focus events to vim
set -g display-time 4000     # display messages for 4 seconds

# start windows and panes at 1, not 0
# 0 is too far from `
set -g base-index 1
set -g pane-base-index 1

# }}}

# {{{ Key Bindings

# remap prefix to Control + a
unbind-key C-b
set -g prefix C-Space
# bind 'C-Space C-Space' to type 'C-Space'
bind-key C-Space send-prefix

bind-key a last-window

# Open new windows in current path
bind-key c new-window -c "#{pane_current_path}"
# Cycle through windows
bind-key -r p select-window -t :-
bind-key -r n select-window -t :+

# Split panes using | and -
bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
unbind-key '"'
unbind-key %

setw -g mode-keys vi # Use vim keybindings in copy mode

# Setup 'v' to begin selection as in Vim
bind-key -T edit-mode-vi Up                send-keys -X history-up
bind-key -T edit-mode-vi Down              send-keys -X history-down
bind-key -T copy-mode-vi v                 send      -X begin-selection
bind-key -T copy-mode-vi [                 send-keys -X begin-selection
bind-key -T copy-mode-vi y                 send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi Enter             send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi ]                 send-keys -X copy-selection
bind-key -T copy-mode-vi C-v               send-keys -X rectangle-toggle
bind-key P paste-buffer

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

# Emacs key bindings in tmux command prompt (<C-a>:)
set -g status-keys emacs

# Detect 256 color support and set TERM accordingly
if-shell 'test "$(tput colors 2>/dev/null || (echo "$TERM" | grep -qE -- "-(256color|kitty)$" && echo 256 || echo 16))" -ge 256' \
  { if-shell "infocmp tmux-256color >/dev/null 2>&1" \
    { set -g default-terminal "tmux-256color" } \
    { set -g default-terminal "screen-256color" } \
  } \
  { set -g default-terminal "screen" }
set -as terminal-overrides ',xterm-256color:Tc'  # Enable True Color
set -as terminal-overrides ',xterm*:sitm=\E[3m' # Enable Italics

# Resize panes - C-a <arrow key>
unbind-key Up
bind-key Up resize-pane -U 4
unbind-key Down
bind-key Down resize-pane -D 4
unbind-key Left
bind-key Left resize-pane -L 10
unbind-key Right
bind-key Right resize-pane -R 10
# Maximize current pane
unbind-key z
bind-key z resize-pane -Z

# Edit configuration
bind-key t switch-client -T TPrefix
bind-key -T TPrefix C-space send-keys C-space
bind-key -T TPrefix C-c send-keys C-c
bind-key -T TPrefix e new-window -n '~/.tmux.local.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.local.conf && tmux source ~/.tmux.conf && tmux display \"Reloaded ~/.tmux.conf\"'"

# Reload configuration
bind-key -T TPrefix r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# set -g status-style bg=default
# # set -g status-left '#(cat #{socket_path}-\#{session_id}-vimbridge)'
# set -g @dracula-show-left-icon '#(whoami)@#(hostname) #(host `hostname` | head -1| cut -d " " -f 4) Ôåç #(cat #{socket_path}-\#{session_id}-vimbridge)'
# set -g status-left-length 100
# set -g status-right '#(cat #{socket_path}-\#{session_id}-vimbridge-R)'
# set -g status-right-length 100
# set -g status-justify centre
# set -g window-status-current-format "#[fg=colour4]\uE0B6#[fg=colour7,bg=colour4]#{?window_zoomed_flag,#[fg=yellow]üîç,}#W#[fg=colour4,bg=default]\uE0B4"
# set -g window-status-format "#[fg=colour244]\uE0B6#[fg=default,bg=colour244]#W#[fg=colour244,bg=default]\uE0B4"
# #set -g status-justify centre # optionally put the window list in the middle

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

# C-h is more useful as backspace. Hence map it to <Prefix>+h
bind-key h select-pane -L
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# }}}

# {{{ Tmux Plugin Manager.

# List of plugins
set -g @tpm_plugins '      \
  tmux-plugins/tpm         \
  tmux-plugins/tmux-yank   \
  fcsonline/tmux-thumbs    \
'

set -g @thumbs-key F
set -g @thumbs-osc52 1            # Copy to local clipboard too
#set -g @thumbs-command 'echo -n {} | xclip -sel clip'

# }}}

# {{{ Status Bar

set -g status on                  # Enable status bar
set -g status-interval 5          # refresh status left/right more often
set -g status-justify left        # Set window list to center
set -g status-keys vi             # Set vi keybinding in the status line
set -g status-position top        # Set the status bar position
set -g status-style "fg=#f8f8f2,bg=#44475a"   # Set status bar bg/fg color.

# {{{ Status Bar: Left

set -g status-left-length 60
set -g status-left-style default

set -g status-left "#[bg=#50fa7b,fg=#282a36]#{?client_prefix,#[bg=#f1fa8c],} #(whoami)@#(hostname) #(host `hostname` | head -1| cut -d ' ' -f 4) Ôåç #[fg=#50fa7b,bg=#44475a]#{?client_prefix,#[fg=#f1fa8c],}ÓÇ∞"

# }}}

# {{{ Status Bar: Right

set -g status-right-length 140
set -g status-right-style default
set -g status-right "#[fg=#6272a4,bg=#44475a,nobold,nounderscore,noitalics]ÓÇ∫#[fg=#f8f8f2,bg=#6272a4] %a %m/%d %I:%M %p "

# }}}

# {{{ Status Bar: Windows List

# Set the inactive window color and style
set -g window-status-style default
set-window-option -g window-status-format "\
#[fg=#f8f8f2]#[bg=#44475a]#F#{?monitor-silence,[#{E:monitor-silence}s],}#{?monitor-activity,[M],} #I #W \
"

# Set the active window color and style
set -g window-status-current-style default
set-window-option -g window-status-current-format "#[fg=#44475a,bg=#6272a4]ÓÇ∞#[fg=#f8f8f2,bg=#6272a4] #{?window_zoomed_flag,Z,}#{?monitor-silence,[#{E:monitor-silence}s],}#{?monitor-activity,[M],} #I #W #[fg=#6272a4,bg=#44475a]ÓÇ∞"

# }}}

# {{{ Auto-hide status bar if pane is maximized
set-hook -g 'after-resize-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-new-window'   'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-kill-pane'  'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'pane-exited'    'run-shell -b "if [ \#{window_zoomed_flag} -eq 1 ]; then tmux set status off; else tmux set status on; fi"'
set-hook -g 'after-split-window' 'run-shell -b "if [ \#{window_zoomed_flag} -gt 1 ]; then tmux set status off; else tmux set status on; fi"'

# }}}

# }}}

# {{{ Windows / Panes

# constrain window size to the maximum size of any client connected to
# *that window*, instead of all clients ever connected to the *session*
setw -g aggressive-resize on

# # Colors for pane borders(default)
# setw -g pane-border-style fg=green,bg=black
# setw -g pane-active-border-style fg=white,bg=black
#
# # Active pane normal, other shaded out
# setw -g window-style fg=colour240,bg=colour235
# setw -g window-active-style fg=white,bg=black

# }}}

# {{{ Activity Monitoring

# do not monitor for activity and silence in other windows by default
set-window-option -g monitor-activity off
set-window-option -g monitor-silence 0

# do not display messages about silence, bell and activity
set -g visual-activity off
set -g visual-bell off
set -g visual-silence off

# define keys for easy activity/silence monitoring
bind-key m "set-window-option monitor-activity \; \
  display 'Toggle monitor activity: #{?monitor-activity,on,off}' \
"
bind-key M command-prompt -p "Monitor seconds of silence (0=off): " " \
  set-window-option monitor-silence '%1' \; \
  display 'Monitoring window for silence: #{?monitor-silence,#{E:monitor-silence} seconds,off}' \
"

# }}}

# {{{ Overrides

# Overrides for tmux running on remote machine
if-shell 'test -n "$SSH_CLIENT" -a -e ~/.tmux/.tmux.remote.conf' \
  'source-file ~/.tmux/tmux.remote.conf'

if '! [ -z "$SSH_TTY" ]' 'set -g status-right "#[fg=colour8] #(whoami)@#h #[fg=colour4] %a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d "'

if-shell 'test "$(uname)" = "Darwin" -a -e ~/.tmux.osx.conf' 'source ~/.tmux.osx.conf'
if-shell 'test "$(uname)" = "Linux" -a -e ~/.tmux.linux.conf' 'source ~/.tmux.linux.conf'

# Per machine overrides
if '[ -f ~/.tmux.local.conf ]' 'source ~/.tmux.local.conf'

# }}}

# {{{ Setup TPM

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
bind-key -T TPrefix p run-shell ' \
  echo "Loading Plugins..."; \
  if [ ! -d ~/.tmux/plugins/tpm ]; then \
    mkdir -p ~/.tmux/plugins/tpm \
      && git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm \
      && ~/.tmux/plugins/tpm/bin/install_plugins; \
  fi; \
  ~/.tmux/plugins/tpm/tpm; \
  echo "Press\n<Prefix>+I to fetch plugins\n<Prefix>+U to update plugin\n<Prefix>+Alt+u to remove plugins" '

# }}}

# {{{ Scratch Window (Popup)

# https://apple.stackexchange.com/a/227286
# We are actually binding to C-/. Both C-_ and C-/ has same control code
bind-key -n 'C-_' if-shell 'case "#S" in scratch-*) true;; *) false;; esac' {
  detach-client
} {
  run-shell "tmux popup -w 95% -h 95% -x 8 -d '#{pane_current_path}' -E 'tmux attach -t \'scratch-#{pane_id}\' || tmux new -s \'scratch-#{pane_id}\' \;'"
}
# Hook to kill scratch sessions when the parent pane exits
#set-hook -g pane-exited "run-shell 'MAIN_SESSION=$(tmux display-message -p \"#S\"); PANE_ID=$(tmux display-message -p \"#D\"); if [ \"\$MAIN_SESSION\" != \"scratch-\$PANE_ID\" ] && tmux has-session -t scratch-\$PANE_ID 2>/dev/null; then tmux kill-session -t scratch-\$PANE_ID; fi'"
set-hook -g pane-exited "run-shell 'if tmux has-session -t 'scratch-#D' 2>/dev/null; then tmux kill-session -t 'scratch-#D'; fi'"

# }}}
